using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using GrafLibrary;

namespace Les6
{
    class Program
    {
        static void Main(string[] args)
        {
            //Матрица смежности.
            //Матрица симметричная без учета весов.
            int[,] matrix = {   { 0, 1, 0, 1, 0, 1 },
                                { 1, 0, 1, 1, 1, 1 },
                                { 0, 1, 1, 0, 1, 0 },
                                { 1, 1, 0, 0, 1, 0 },
                                { 0, 1, 1, 1, 0, 0 },
                                { 1, 1, 0, 0, 0, 0 }
                            };
            var graph = new Graph(matrix);
            Console.WriteLine("Обход графа в ширину.");
            graph.BFS(graph.Nodes[0]);
            Console.WriteLine("\nОбход графа в ширину.");
            graph.DFS(graph.Nodes[0]);
            Console.ReadKey();
        }
        /*
        Обход графа в ширину.
        Помещаем начальный узел в очередь.
        Выводим значение узла в консоль. A
        У узла A 3 ссылка/ссылки/ссылок.
        Помещаем узел A в HashSet.
        B является ребенком узла A. Помещаем в очередь.
        D является ребенком узла A. Помещаем в очередь.
        F является ребенком узла A. Помещаем в очередь.
        Выводим значение узла в консоль. B
        У узла B 5 ссылка/ссылки/ссылок.
        Помещаем узел B в HashSet.
        A является ребенком узла B, но он был посещен ранее.
        C является ребенком узла B. Помещаем в очередь.
        D является ребенком узла B. Помещаем в очередь.
        E является ребенком узла B. Помещаем в очередь.
        F является ребенком узла B. Помещаем в очередь.
        Выводим значение узла в консоль. D
        У узла D 3 ссылка/ссылки/ссылок.
        Помещаем узел D в HashSet.
        A является ребенком узла D, но он был посещен ранее.
        B является ребенком узла D, но он был посещен ранее.
        E является ребенком узла D. Помещаем в очередь.
        Выводим значение узла в консоль. F
        У узла F 2 ссылка/ссылки/ссылок.
        Помещаем узел F в HashSet.
        A является ребенком узла F, но он был посещен ранее.
        B является ребенком узла F, но он был посещен ранее.
        Выводим значение узла в консоль. C
        У узла C 3 ссылка/ссылки/ссылок.
        Помещаем узел C в HashSet.
        B является ребенком узла C, но он был посещен ранее.
        C является ребенком узла C, но он был посещен ранее.
        E является ребенком узла C. Помещаем в очередь.
        Узел D был посещен ранее.
        Выводим значение узла в консоль. E
        У узла E 3 ссылка/ссылки/ссылок.
        Помещаем узел E в HashSet.
        B является ребенком узла E, но он был посещен ранее.
        C является ребенком узла E, но он был посещен ранее.
        D является ребенком узла E, но он был посещен ранее.
        Узел F был посещен ранее.
        Узел E был посещен ранее.
        Узел E был посещен ранее.
        Граф пройден до конца.

        Обход графа в ширину.
        Помещаем начальный узел в стек.
        Выводим значение узла в консоль. A
        У узла A 3 ссылка/ссылки/ссылок.
        Помещаем узел A в HashSet.
        B является ребенком узла A. Помещаем в стек.
        D является ребенком узла A. Помещаем в стек.
        F является ребенком узла A. Помещаем в стек.
        Выводим значение узла в консоль. F
        У узла F 2 ссылка/ссылки/ссылок.
        Помещаем узел F в HashSet.
        A является ребенком узла F, но он был посещен ранее.
        B является ребенком узла F. Помещаем в стек.
        Выводим значение узла в консоль. B
        У узла B 5 ссылка/ссылки/ссылок.
        Помещаем узел B в HashSet.
        A является ребенком узла B, но он был посещен ранее.
        C является ребенком узла B. Помещаем в стек.
        D является ребенком узла B. Помещаем в стек.
        E является ребенком узла B. Помещаем в стек.
        F является ребенком узла B, но он был посещен ранее.
        Выводим значение узла в консоль. E
        У узла E 3 ссылка/ссылки/ссылок.
        Помещаем узел E в HashSet.
        B является ребенком узла E, но он был посещен ранее.
        C является ребенком узла E. Помещаем в стек.
        D является ребенком узла E. Помещаем в стек.
        Выводим значение узла в консоль. D
        У узла D 3 ссылка/ссылки/ссылок.
        Помещаем узел D в HashSet.
        A является ребенком узла D, но он был посещен ранее.
        B является ребенком узла D, но он был посещен ранее.
        E является ребенком узла D, но он был посещен ранее.
        Выводим значение узла в консоль. C
        У узла C 3 ссылка/ссылки/ссылок.
        Помещаем узел C в HashSet.
        B является ребенком узла C, но он был посещен ранее.
        C является ребенком узла C, но он был посещен ранее.
        E является ребенком узла C, но он был посещен ранее.
        Узел D был посещен ранее.
        Узел C был посещен ранее.
        Узел D был посещен ранее.
        Узел B был посещен ранее.
        Граф пройден до конца.
 
         */
    }
}
